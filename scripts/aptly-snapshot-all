#!/usr/bin/env ruby

# This script will create a new snapshot for each repo and each mirror,
# named by the current UNIX timestamp. Once all snapshots are created, it
# will then create a merged snapshot of all of the newly-created snapshots.

require 'syslog'
require 'aptly'

# Get a short id and make sure it hasn't been used
existing = Aptly.list_snapshots
while id = Time.now.to_i.to_s
  break if !existing.include? id
  sleep 1
end

begin
  to_snapshot = Array.new
  snapshots = Array.new
  snapshot_names = Array.new

  # Add mirrors to the snapshot queue
  Aptly.list_mirrors.each do |mirror_name|
    to_snapshot << Aptly::Mirror.new(mirror_name)
  end

  # Add repos to the snapshot queue
  Aptly.list_repos.each do |repo_name|
    to_snapshot << Aptly::Repo.new(repo_name)
  end

  # Loop over queue and create snapshots
  to_snapshot.each do |r|
    snapshot_name = "#{r.name}.#{id}"
    puts "==> Creating snapshot: #{snapshot_name}"

    # Add it to our list of snapshots.
    snapshots << r.snapshot(snapshot_name)
    snapshot_names << snapshot_name
  end

  # Merge all of the snapshots taken into a single snapshot.
  puts "==> Creating merged snapshot: #{id}"
  merged = Aptly.merge_snapshots id, :sources => snapshot_names, :latest => true

  # Remove the remnant snapshots - we don't need them.
  snapshots.each do |snapshot|
    puts "==> Deleting snapshot: #{snapshot.name}"
    snapshot.drop force: true
  end

  # Expose the merged snapshot only
  publish_path = "snapshots/#{id}"
  puts "==> Publishing merged snapshot: #{publish_path}"
  merged.publish :prefix => publish_path, :dist => 'stable'

  puts 'Done!'
  exit 0
rescue AptlyError => e
  Syslog.open('aptly') {|log| log.err e.message}
  File.open('aptly.log', 'a+').write <<-EOF
=== #{Time.now} ===
--- error: #{e.message}
--- stdout:
#{e.stdout}
--- stderr:
#{e.stderr}

EOF
  exit 1
end
